#Design a lexical analyzer for given language and the lexical analyzer should ignore redundant spaces, tabs and new lines.
It should also ignore comments. Although the syntax specification states that identifiers can be arbitrarily long, you may restrict the length to some reasonable value.
Simulate the same in C/C++ language.

#include<stdio.h>
#include<conio.h>
#include<ctype.h>
int main()
{
	char a[10];
	int flag,i=1;
	printf("\n enter a identifier:");
	gets(a);
	if(isalpha(a[0]))
	flag=1;
	else
	printf("\n not a valid identifier");
	while(a[i]!='\0')
	{
		if(!isdigit(a[i])&&!isalpha(a[i]))
		{
			flag=0;
			break;
		}i++;
		
	}
	if(flag==1)
	printf("\n valid identifier");
	
}
